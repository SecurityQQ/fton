generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  name                String
  firstName           String?        // Added to handle properties from Telegram
  lastName            String?        // Added to handle properties from Telegram
  username            String?        // Added to handle properties from Telegram
  photoUrl            String?        // Added to handle properties from Telegram
  isBot               Boolean?       @default(false) // Added to handle properties from Telegram
  isPremium           Boolean?       @default(false) // Added to handle properties from Telegram
  languageCode        String?        // Added to handle properties from Telegram
  allowsWriteToPm     Boolean?       @default(false) // Added to handle properties from Telegram
  addedToAttachmentMenu Boolean?     @default(false) // Added to handle properties from Telegram
  walletAddress       String?        @unique
  telegramHandle      String?
  telegramId          String         @unique
  birthdate           DateTime?
  tokenBalance        Float          @default(0)
  lastPeriodDate      DateTime?
  menstruations       Menstruation[]
  invitationsSent     Invitation[]   @relation("Inviter")
  invitationsReceived Invitation[]   @relation("Invitee")
  socialMedia         SocialMedia[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([telegramId], name: "telegramId_index")
}

model Menstruation {
  id        String   @id @default(cuid())
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id        String   @id @default(cuid())
  inviter   User     @relation("Inviter", fields: [inviterId], references: [id])
  inviterId String
  invitee   User?    @relation("Invitee", fields: [inviteeId], references: [id])
  inviteeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialMedia {
  id        String   @id @default(cuid())
  platform  String
  handle    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
